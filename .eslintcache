[{"C:\\Users\\Samuel\\OneDrive - Linköpings universitet\\Documents\\eSkog\\skogsite\\src\\index.js":"1","C:\\Users\\Samuel\\OneDrive - Linköpings universitet\\Documents\\eSkog\\skogsite\\src\\reportWebVitals.js":"2","C:\\Users\\Samuel\\OneDrive - Linköpings universitet\\Documents\\eSkog\\skogsite\\src\\App.js":"3","C:\\Users\\Samuel\\OneDrive - Linköpings universitet\\Documents\\eSkog\\skogsite\\src\\firestore.js":"4","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\index.js":"5","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\reportWebVitals.js":"6","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\App.js":"7","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\geojsonSource.js":"8","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\metadataComponent.js":"9","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\MetadataComponent.js":"10","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\ageTableComponent.js":"11","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\AgeTableComponent.js":"12","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\Map.js":"13","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\utils\\tooltips.js":"14","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\SummaryComponent.js":"15","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\utils\\Utils.js":"16","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\utils\\map-style.js":"17","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\utils\\firestore.js":"18","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\data\\areas.js":"19","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\data\\border.js":"20","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\data\\houses.js":"21"},{"size":500,"mtime":499162500000,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":242,"mtime":1609781744298,"results":"25","hashOfConfig":"23"},{"size":913,"mtime":1609781638134,"results":"26","hashOfConfig":"23"},{"size":187,"mtime":1610670356342,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"28"},{"size":3863,"mtime":1610812637730,"results":"30","hashOfConfig":"28"},{"size":2130,"mtime":1610570689776,"results":"31","hashOfConfig":"28"},{"size":224,"mtime":1610317375463,"results":"32","hashOfConfig":"28"},{"size":4745,"mtime":1610796791030,"results":"33","hashOfConfig":"28"},{"size":5218,"mtime":1610537567886,"results":"34","hashOfConfig":"28"},{"size":10994,"mtime":1610733592719,"results":"35","hashOfConfig":"28"},{"size":5611,"mtime":1610816038520,"results":"36","hashOfConfig":"28"},{"size":938,"mtime":1610591280641,"results":"37","hashOfConfig":"28"},{"size":7555,"mtime":1610815493567,"results":"38","hashOfConfig":"28"},{"size":1428,"mtime":1610806111057,"results":"39","hashOfConfig":"28"},{"size":1516,"mtime":1610813364044,"results":"40","hashOfConfig":"28"},{"size":666,"mtime":1610628859609,"results":"41","hashOfConfig":"28"},{"size":39305,"mtime":1610797764731,"results":"42","hashOfConfig":"28"},{"size":1191,"mtime":1610760835465,"results":"43","hashOfConfig":"28"},{"size":2377,"mtime":1610799344818,"results":"44","hashOfConfig":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"maxb5o",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"pwzxyb",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"C:\\Users\\Samuel\\OneDrive - Linköpings universitet\\Documents\\eSkog\\skogsite\\src\\index.js",[],"C:\\Users\\Samuel\\OneDrive - Linköpings universitet\\Documents\\eSkog\\skogsite\\src\\reportWebVitals.js",[],"C:\\Users\\Samuel\\OneDrive - Linköpings universitet\\Documents\\eSkog\\skogsite\\src\\App.js",[],["90","91"],"C:\\Users\\Samuel\\OneDrive - Linköpings universitet\\Documents\\eSkog\\skogsite\\src\\firestore.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\index.js",[],["92","93"],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\reportWebVitals.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\App.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\geojsonSource.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\metadataComponent.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\MetadataComponent.js",["94","95","96"],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\ageTableComponent.js",["97","98","99"],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\AgeTableComponent.js",["100"],"import React, { useState, useEffect } from 'react';\r\nimport db from '../utils/firestore.js' \r\nimport {tableText} from \"../utils/tooltips.js\"\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n// Icons\r\nimport EditIcon from \"@material-ui/icons/EditOutlined\";\r\nimport DoneIcon from \"@material-ui/icons/DoneAllTwoTone\";\r\nimport RevertIcon from \"@material-ui/icons/NotInterestedOutlined\";\r\nimport { Chart } from 'primereact/chart';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"80%\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\"\r\n  },\r\n  table: {\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    minWidth: 650\r\n  },\r\n  selectTableCell: {\r\n    width: 20,\r\n    height: 0,\r\n    padding: 0\r\n\r\n  },\r\n  tableCell: {\r\n    width: 30,\r\n    height: 0,\r\n    padding: 0\r\n  },\r\n  input: {\r\n    width: 40,\r\n    height: 30,\r\n    flex: 1,\r\n    \"& input::-webkit-clear-button, & input::-webkit-outer-spin-button, & input::-webkit-inner-spin-button\": {\r\n      display: \"none\"\r\n}\r\n  }\r\n}));\r\n\r\nconst createData = (ageRange, \r\n                    area, \r\n                    percent, \r\n                    hecVolume, \r\n                    totVolume,\r\n                    quality,\r\n                    growthRate,\r\n                    pine,\r\n                    fir,\r\n                    leaf) => ({\r\n  id: ageRange.replace(\" \", \"_\"),\r\n  ageRange,\r\n  area,\r\n  percent,\r\n  hecVolume,\r\n  totVolume,\r\n  quality,\r\n  growthRate,\r\n  pine,\r\n  fir,\r\n  leaf,\r\n  isEditMode: false\r\n});\r\n\r\nconst CustomTableCell = ({ row, name, onChange }) => {\r\n  const classes = useStyles();\r\n  const { isEditMode } = row;\r\n  return (\r\n    <TableCell align=\"center\" className={classes.tableCell}>\r\n      {isEditMode ? (\r\n        <TextField\r\n          value={row[name]}\r\n          name={name}\r\n          onChange={e => onChange(e, row)}\r\n          className={classes.input}\r\n          size=\"small\"\r\n          type=\"number\"\r\n        />\r\n      ) : (\r\n        row[name]\r\n      )}\r\n    </TableCell>\r\n  );\r\n};\r\n\r\nfunction AgeTableComponent() {\r\n  const classes = useStyles();\r\n\r\n  const [rows, setRows] = useState([]);\r\n  const [previous, setPrevious] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let temp = []\r\n    db.collection(\"ages\").orderBy(\"orderId\").get().then(function(querySnapshot) {\r\n      querySnapshot.forEach(function(doc) {\r\n          setLoading(false);\r\n          temp.push(createData(doc.data().ageRange, \r\n                     doc.data().area, \r\n                     doc.data().percent, \r\n                     doc.data().hecVolume, \r\n                     doc.data().totVolume, \r\n                     doc.data().quality, \r\n                     doc.data().growthRate, \r\n                     doc.data().pine, \r\n                     doc.data().fir, \r\n                     doc.data().leaf))\r\n      });\r\n      let newArray = sumRows(temp);\r\n      setRows(state => {\r\n        return newArray.map(row => {\r\n          return row;\r\n        });\r\n      });\r\n    });\r\n  },[]); \r\n\r\n\r\n  const onToggleEditMode = id => {\r\n    setRows(state => {\r\n      return rows.map(row => {\r\n        if (row.id === id) {\r\n          return { ...row, isEditMode: !row.isEditMode };\r\n        }\r\n        return row;\r\n      });\r\n    });\r\n  };\r\n\r\n  const onSaveEditMode = id => {\r\n    const found = rows.find(element => element.id === id);\r\n    db.collection(\"ages\").doc(found.ageRange).update(found)\r\n    .then(function() {\r\n        console.log(\"Document successfully written!\");\r\n    })\r\n    .catch(function(error) {\r\n        console.error(\"Error writing document: \", error);\r\n    });\r\n    onToggleEditMode(id);\r\n    console.log(\"saved to database\")\r\n  };\r\n\r\n  const onChange = (e, row) => {\r\n\r\n    if (!previous[row.id]) {\r\n      setPrevious(state => ({ ...state, [row.id]: row }));\r\n    }\r\n\r\n    let value = e.target.value;\r\n    const name = e.target.name;\r\n    const { id } = row;\r\n    const newRows = rows.map(row => {\r\n      if (row.id === id) {\r\n        return { ...row, [name]: parseFloat(value) };\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n  };\r\n  \r\n  const onRevert = id => {\r\n    const newRows = rows.map(row => {\r\n      if (row.id === id) {\r\n        return previous[id] ? previous[id] : row;\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n    setPrevious(state => {\r\n      delete state[id];\r\n      return state;\r\n    });\r\n    onToggleEditMode(id);\r\n  };\r\n\r\n  const calcMedian = arr => {\r\n    const mid = Math.floor(arr.length / 2),\r\n      nums = [...arr].sort((a, b) => a - b);\r\n    return arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\r\n  };\r\n  const sumRows = (rows) => { //\r\n    let rowsCopy = rows; \r\n\r\n    let area = rows.reduce((r, d) => parseInt(r) + d.area, 0);\r\n    let percent = rows.reduce((r, d) => r + d.percent, 0);\r\n\r\n    var hecVolArray = [];\r\n    for(var i=0; i<rows.length; i++) {\r\n      hecVolArray.push(rows[i].hecVolume)\r\n    }\r\n    let hecVolumeMedian = calcMedian(hecVolArray);\r\n    let totVolume = rows.reduce((r, d) => r + d.totVolume, 0);\r\n\r\n    var qualityArray = [];\r\n    for(var j=0; j<rows.length; j++) {\r\n      qualityArray.push(rows[j].quality)\r\n    }\r\n    let qualityMedian = calcMedian(qualityArray);\r\n\r\n    var growthRateArray = [];\r\n    for(var k=0; k<rows.length; k++) {\r\n      growthRateArray.push(rows[k].growthRate)\r\n    }\r\n    let growthRateMedian = calcMedian(growthRateArray);\r\n\r\n\r\n    // hardcoded percents for now\r\n    let pine = 23\r\n    let fir = 71\r\n    let leaf = 6\r\n    let summedRow = createData(\"Summa\", area, percent, hecVolumeMedian.toFixed(1), totVolume, qualityMedian.toFixed(1), growthRateMedian.toFixed(1), pine, fir, leaf)\r\n    rowsCopy.push(summedRow) // Append sum row\r\n    return rowsCopy\r\n  }\r\n  \r\n  let ageLabels = rows.map(a => a.ageRange);\r\n  ageLabels.pop()\r\n  let areaData = rows.map(a => a.area);  \r\n  areaData.pop()\r\n\r\n\r\n  const basicData = {\r\n    labels: ageLabels,\r\n    datasets: [\r\n        {\r\n            label: 'Åldersklassfördelning idag',\r\n            backgroundColor: '#42A5F5',\r\n            data: areaData\r\n        }\r\n      ]\r\n    };\r\n    let basicOptions = {\r\n      legend: {\r\n          labels: {\r\n              fontColor: '#495057'\r\n          }\r\n      },\r\n      scales: {\r\n          xAxes: [{\r\n              ticks: {\r\n                  fontColor: '#495057'\r\n              }\r\n          }],\r\n          yAxes: [{\r\n              ticks: {\r\n                  fontColor: '#495057'\r\n              }\r\n          }]\r\n    }\r\n  };\r\n\r\n  return (\r\n    \r\n    <Paper className={classes.root}>\r\n    {loading ? (\r\n\r\n    <LinearProgress color=\"secondary\" />\r\n\r\n  ) : (\r\n    <div>\r\n      <Table className={classes.table} size=\"small\" aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"center\" colSpan={1}><Tooltip title={tableText.areal} arrow><span>Åldersklass</span></Tooltip></TableCell> \r\n            <TableCell align=\"center\" colSpan={2}><Tooltip title={tableText.areal} arrow><span>Areal</span></Tooltip></TableCell>\r\n            <TableCell align=\"center\" colSpan={2}><Tooltip title={tableText.storage} arrow><span>Virkesförråd</span></Tooltip></TableCell>\r\n            <TableCell align=\"center\" colSpan={1}><Tooltip title={tableText.quality} arrow><span>Bonitet</span></Tooltip></TableCell>\r\n            <TableCell align=\"center\" colSpan={1}><Tooltip title={tableText.growthRate} arrow><span>Tillväxt</span></Tooltip></TableCell>\r\n            <TableCell align=\"center\" colSpan={3}><Tooltip title={tableText.distribution} arrow><span>Trädslagsfördelning&nbsp;(%)</span></Tooltip></TableCell>\r\n            <TableCell align=\"center\"></TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell align=\"center\" />\r\n            <TableCell align=\"center\">ha</TableCell>\r\n            <TableCell align=\"center\">%</TableCell>\r\n            <TableCell align=\"center\">m3sk/ha</TableCell>\r\n            <TableCell align=\"center\">m3sktot</TableCell>\r\n            <TableCell align=\"center\" colSpan={2}>m3sk/ha och år</TableCell>\r\n            <TableCell align=\"center\">Tall</TableCell>\r\n            <TableCell align=\"center\">Gran</TableCell>\r\n            <TableCell align=\"center\">Löv</TableCell>\r\n            <TableCell align=\"center\"></TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map(row => (\r\n            <TableRow key={row.id}>\r\n              <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n                {row.ageRange}\r\n              </TableCell>\r\n              <CustomTableCell {...{ row, name: \"area\", onChange }} />\r\n              <CustomTableCell {...{ row, name: \"percent\", onChange }} />\r\n              <CustomTableCell {...{ row, name: \"hecVolume\", onChange }} />\r\n              <CustomTableCell {...{ row, name: \"totVolume\", onChange }} />\r\n              <CustomTableCell {...{ row, name: \"quality\", onChange }} />\r\n              <CustomTableCell {...{ row, name: \"growthRate\", onChange }} />\r\n              <CustomTableCell {...{ row, name: \"pine\", onChange }} />\r\n              <CustomTableCell {...{ row, name: \"fir\", onChange }} />\r\n              <CustomTableCell {...{ row, name: \"leaf\", onChange }} />\r\n              <TableCell className={classes.selectTableCell}>\r\n                {row.isEditMode ? (\r\n                  <>\r\n                    <IconButton\r\n                      aria-label=\"done\"\r\n                      size=\"small\"\r\n                      onClick={() => onSaveEditMode(row.id)}\r\n                    >\r\n                      <DoneIcon fontSize=\"small\"/>\r\n                    </IconButton>\r\n                    <IconButton\r\n                      aria-label=\"revert\"\r\n                      size=\"small\"\r\n                      onClick={() => onRevert(row.id)}\r\n                    >\r\n                      <RevertIcon fontSize=\"small\"/>\r\n                    </IconButton>\r\n                  </>\r\n                ) : (\r\n                  <IconButton\r\n                    aria-label=\"delete\"\r\n                    size=\"small\"\r\n                    onClick={() => onToggleEditMode(row.id)}\r\n                  >\r\n                    <EditIcon fontSize=\"small\"/>\r\n                  </IconButton>\r\n                )}\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n      <Chart type=\"bar\" data={basicData} options={basicOptions} />\r\n   </div>\r\n  )}\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default AgeTableComponent;","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\Map.js",["101","102"],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\utils\\tooltips.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\SummaryComponent.js",["103","104","105","106","107"],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\utils\\Utils.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\utils\\map-style.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\utils\\firestore.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\data\\areas.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\data\\border.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\data\\houses.js",[],{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"108","replacedBy":"112"},{"ruleId":"110","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":1,"column":37,"nodeType":"116","messageId":"117","endLine":1,"endColumn":43},{"ruleId":"114","severity":1,"message":"118","line":2,"column":8,"nodeType":"116","messageId":"117","endLine":2,"endColumn":23},{"ruleId":"114","severity":1,"message":"119","line":4,"column":8,"nodeType":"116","messageId":"117","endLine":4,"endColumn":16},{"ruleId":"114","severity":1,"message":"120","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"114","severity":1,"message":"115","line":1,"column":38,"nodeType":"116","messageId":"117","endLine":1,"endColumn":44},{"ruleId":"114","severity":1,"message":"121","line":2,"column":8,"nodeType":"116","messageId":"117","endLine":2,"endColumn":16},{"ruleId":"122","severity":1,"message":"123","line":130,"column":5,"nodeType":"124","endLine":130,"endColumn":7,"suggestions":"125"},{"ruleId":"114","severity":1,"message":"126","line":10,"column":30,"nodeType":"116","messageId":"117","endLine":10,"endColumn":48},{"ruleId":"114","severity":1,"message":"127","line":12,"column":9,"nodeType":"116","messageId":"117","endLine":12,"endColumn":26},{"ruleId":"114","severity":1,"message":"115","line":1,"column":37,"nodeType":"116","messageId":"117","endLine":1,"endColumn":43},{"ruleId":"114","severity":1,"message":"119","line":3,"column":8,"nodeType":"116","messageId":"117","endLine":3,"endColumn":16},{"ruleId":"114","severity":1,"message":"128","line":10,"column":8,"nodeType":"116","messageId":"117","endLine":10,"endColumn":15},{"ruleId":"114","severity":1,"message":"129","line":23,"column":12,"nodeType":"116","messageId":"117","endLine":23,"endColumn":19},{"ruleId":"114","severity":1,"message":"130","line":24,"column":11,"nodeType":"116","messageId":"117","endLine":24,"endColumn":14},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],["131"],["132"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'ContentEditable' is defined but never used.","'firebase' is defined but never used.","'useEffect' is defined but never used.","'ReactDOM' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sumRows'. Either include it or remove the dependency array.","ArrayExpression",["133"],"'geoJsonToFirestore' is defined but never used.","'featurecollection' is defined but never used.","'Divider' is defined but never used.","'loading' is assigned a value but never used.","'obj' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},"Update the dependencies array to be: [sumRows]",{"range":"136","text":"137"},[3542,3544],"[sumRows]"]