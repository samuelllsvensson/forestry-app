[{"C:\\Users\\Samuel\\OneDrive - Linköpings universitet\\Documents\\eSkog\\skogsite\\src\\index.js":"1","C:\\Users\\Samuel\\OneDrive - Linköpings universitet\\Documents\\eSkog\\skogsite\\src\\reportWebVitals.js":"2","C:\\Users\\Samuel\\OneDrive - Linköpings universitet\\Documents\\eSkog\\skogsite\\src\\App.js":"3","C:\\Users\\Samuel\\OneDrive - Linköpings universitet\\Documents\\eSkog\\skogsite\\src\\firestore.js":"4","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\index.js":"5","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\reportWebVitals.js":"6","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\App.js":"7","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\geojsonSource.js":"8","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\metadataComponent.js":"9","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\MetadataComponent.js":"10","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\ageTableComponent.js":"11","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\AgeTableComponent.js":"12","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\Map.js":"13","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\utils\\tooltips.js":"14","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\SummaryComponent.js":"15","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\utils\\Utils.js":"16","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\utils\\map-style.js":"17","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\utils\\firestore.js":"18","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\data\\areas.js":"19","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\data\\border.js":"20","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\data\\houses.js":"21"},{"size":500,"mtime":499162500000,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":242,"mtime":1609781744298,"results":"25","hashOfConfig":"23"},{"size":913,"mtime":1609781638134,"results":"26","hashOfConfig":"23"},{"size":187,"mtime":1610670356342,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"28"},{"size":3863,"mtime":1610812637730,"results":"30","hashOfConfig":"28"},{"size":2130,"mtime":1610570689776,"results":"31","hashOfConfig":"28"},{"size":224,"mtime":1610317375463,"results":"32","hashOfConfig":"28"},{"size":4745,"mtime":1610796791030,"results":"33","hashOfConfig":"28"},{"size":5218,"mtime":1610537567886,"results":"34","hashOfConfig":"28"},{"size":10994,"mtime":1610733592719,"results":"35","hashOfConfig":"28"},{"size":5926,"mtime":1610887812062,"results":"36","hashOfConfig":"28"},{"size":938,"mtime":1610591280641,"results":"37","hashOfConfig":"28"},{"size":7555,"mtime":1610815493567,"results":"38","hashOfConfig":"28"},{"size":1428,"mtime":1610806111057,"results":"39","hashOfConfig":"28"},{"size":1516,"mtime":1610813364044,"results":"40","hashOfConfig":"28"},{"size":666,"mtime":1610628859609,"results":"41","hashOfConfig":"28"},{"size":39305,"mtime":1610797764731,"results":"42","hashOfConfig":"28"},{"size":1191,"mtime":1610760835465,"results":"43","hashOfConfig":"28"},{"size":2377,"mtime":1610799344818,"results":"44","hashOfConfig":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"maxb5o",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"pwzxyb",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"C:\\Users\\Samuel\\OneDrive - Linköpings universitet\\Documents\\eSkog\\skogsite\\src\\index.js",[],"C:\\Users\\Samuel\\OneDrive - Linköpings universitet\\Documents\\eSkog\\skogsite\\src\\reportWebVitals.js",[],"C:\\Users\\Samuel\\OneDrive - Linköpings universitet\\Documents\\eSkog\\skogsite\\src\\App.js",[],["92","93"],"C:\\Users\\Samuel\\OneDrive - Linköpings universitet\\Documents\\eSkog\\skogsite\\src\\firestore.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\index.js",[],["94","95"],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\reportWebVitals.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\App.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\geojsonSource.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\metadataComponent.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\MetadataComponent.js",["96","97","98"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport ContentEditable from 'react-contenteditable'\r\nimport db from '../utils/firestore.js' // <----\r\nimport firebase from \"firebase/app\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Chart } from 'primereact/chart';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {metadata} from \"../geojsonSource.js\"\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n    textAlign: 'center',\r\n  },\r\n});\r\nconst MetadataComponent = ({dataParentToChild}) => {\r\n    const classes = useStyles();\r\n    const [metaData, setMetaData] = useState({actions: {}, general: {}, distribution: {}, notes: \"\", description: {}});\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        // Read data from firestore\r\n        // console.log(dataParentToChild.toString())\r\n        if (dataParentToChild) {\r\n        \r\n            db.collection(\"data\").doc(dataParentToChild.toString()).set(metadata)\r\n            .then(function() {\r\n            console.log(\"Document successfully written!\");\r\n            })\r\n            .catch(function(error) {\r\n            console.error(\"Error writing document: \", error);\r\n            });\r\n        }\r\n        db.collection(\"data\").doc(dataParentToChild.toString()).get()\r\n        .then(function(doc) {\r\n            if (doc.exists) {\r\n                console.log(\"Document data:\", doc.data());\r\n                setMetaData(doc.data());\r\n                setLoading(false);\r\n            } else {\r\n                console.log(\"No such document!\");\r\n            }\r\n        }).catch(function(error) {\r\n            console.log(\"Error getting document:\", error);\r\n        });\r\n    }, [dataParentToChild]);\r\n    //if(!metaData) { return null }\r\n    //if(loading) { return null } \r\n    // Polar area chart (Diameter)\r\n    const chartData = {\r\n        datasets: [{\r\n            data: [\r\n                // 5,6 ,7\r\n                metaData.distribution.diamFir,\r\n                metaData.distribution.diamLeaf,\r\n                metaData.distribution.diamPine\r\n            ],\r\n            backgroundColor: [\r\n                \"#42A5F5\",\r\n                \"#66BB6A\",\r\n                \"#FFA726\"\r\n            ],\r\n            label: 'Genomsnittsdiameter träd (cm)'\r\n        }],\r\n        labels: [\r\n            \"Gran\",\r\n            \"Löv\",\r\n            \"Tall\"\r\n        ]\r\n    };\r\n    const pieChartData = {\r\n        datasets: [\r\n            {\r\n                data: [\r\n                    metaData.distribution.distFir, \r\n                    metaData.distribution.distLeaf, \r\n                    metaData.distribution.distPine\r\n                ],\r\n                backgroundColor: [\r\n                    \"#42A5F5\",\r\n                    \"#66BB6A\",\r\n                    \"#FFA726\"\r\n                ],\r\n                hoverBackgroundColor: [\r\n                    \"#64B5F6\",\r\n                    \"#81C784\",\r\n                    \"#FFB74D\"\r\n                ]\r\n            }\r\n        ],    \r\n        labels: [\r\n            \"Gran\",\r\n            \"Löv\",\r\n            \"Tall\"\r\n        ],\r\n    };\r\n    const polarOptions = {\r\n        legend: {\r\n            labels: {\r\n                fontColor: '#495057'\r\n            }\r\n        },\r\n        scale: {\r\n            gridLines: {\r\n                color: '#ebedef'\r\n            }\r\n        }\r\n    };\r\n    \r\n    const pieOptions = {\r\n        legend: {\r\n            labels: {\r\n                fontColor: '#495057'\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <Paper className={classes.root}>\r\n    {loading ? (\r\n    <LinearProgress color=\"secondary\" />\r\n  ) : (\r\n        <Paper className={classes.root}>\r\n            <Container maxWidth=\"sm\">\r\n                <Typography variant=\"h3\" component=\"h2\" gutterBottom>\r\n                    {metaData.general.name}\r\n                </Typography>\r\n                <Typography variant=\"h6\" component=\"h2\" gutterBottom>\r\n                    {metaData.general.area} hektar\r\n                </Typography>\r\n                <Grid container spacing={3}>\r\n\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Chart type=\"polarArea\" data={chartData} options={polarOptions} />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Chart type=\"pie\" data={pieChartData} options={pieOptions} />\r\n                    </Grid>\r\n\r\n                </Grid>\r\n\r\n            </Container>\r\n        </Paper>\r\n   \r\n      )}\r\n    </Paper>\r\n\r\n    );\r\n}\r\nexport default MetadataComponent;","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\ageTableComponent.js",["99","100","101"],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\AgeTableComponent.js",["102"],"import React, { useState, useEffect } from 'react';\r\nimport db from '../utils/firestore.js' \r\nimport {tableText} from \"../utils/tooltips.js\"\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n// Icons\r\nimport EditIcon from \"@material-ui/icons/EditOutlined\";\r\nimport DoneIcon from \"@material-ui/icons/DoneAllTwoTone\";\r\nimport RevertIcon from \"@material-ui/icons/NotInterestedOutlined\";\r\nimport { Chart } from 'primereact/chart';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"80%\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\"\r\n  },\r\n  table: {\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    minWidth: 650\r\n  },\r\n  selectTableCell: {\r\n    width: 20,\r\n    height: 0,\r\n    padding: 0\r\n\r\n  },\r\n  tableCell: {\r\n    width: 30,\r\n    height: 0,\r\n    padding: 0\r\n  },\r\n  input: {\r\n    width: 40,\r\n    height: 30,\r\n    flex: 1,\r\n    \"& input::-webkit-clear-button, & input::-webkit-outer-spin-button, & input::-webkit-inner-spin-button\": {\r\n      display: \"none\"\r\n}\r\n  }\r\n}));\r\n\r\nconst createData = (ageRange, \r\n                    area, \r\n                    percent, \r\n                    hecVolume, \r\n                    totVolume,\r\n                    quality,\r\n                    growthRate,\r\n                    pine,\r\n                    fir,\r\n                    leaf) => ({\r\n  id: ageRange.replace(\" \", \"_\"),\r\n  ageRange,\r\n  area,\r\n  percent,\r\n  hecVolume,\r\n  totVolume,\r\n  quality,\r\n  growthRate,\r\n  pine,\r\n  fir,\r\n  leaf,\r\n  isEditMode: false\r\n});\r\n\r\nconst CustomTableCell = ({ row, name, onChange }) => {\r\n  const classes = useStyles();\r\n  const { isEditMode } = row;\r\n  return (\r\n    <TableCell align=\"center\" className={classes.tableCell}>\r\n      {isEditMode ? (\r\n        <TextField\r\n          value={row[name]}\r\n          name={name}\r\n          onChange={e => onChange(e, row)}\r\n          className={classes.input}\r\n          size=\"small\"\r\n          type=\"number\"\r\n        />\r\n      ) : (\r\n        row[name]\r\n      )}\r\n    </TableCell>\r\n  );\r\n};\r\n\r\nfunction AgeTableComponent() {\r\n  const classes = useStyles();\r\n\r\n  const [rows, setRows] = useState([]);\r\n  const [previous, setPrevious] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let temp = []\r\n    db.collection(\"ages\").orderBy(\"orderId\").get().then(function(querySnapshot) {\r\n      querySnapshot.forEach(function(doc) {\r\n          setLoading(false);\r\n          temp.push(createData(doc.data().ageRange, \r\n                     doc.data().area, \r\n                     doc.data().percent, \r\n                     doc.data().hecVolume, \r\n                     doc.data().totVolume, \r\n                     doc.data().quality, \r\n                     doc.data().growthRate, \r\n                     doc.data().pine, \r\n                     doc.data().fir, \r\n                     doc.data().leaf))\r\n      });\r\n      let newArray = sumRows(temp);\r\n      setRows(state => {\r\n        return newArray.map(row => {\r\n          return row;\r\n        });\r\n      });\r\n    });\r\n  },[]); \r\n\r\n\r\n  const onToggleEditMode = id => {\r\n    setRows(state => {\r\n      return rows.map(row => {\r\n        if (row.id === id) {\r\n          return { ...row, isEditMode: !row.isEditMode };\r\n        }\r\n        return row;\r\n      });\r\n    });\r\n  };\r\n\r\n  const onSaveEditMode = id => {\r\n    const found = rows.find(element => element.id === id);\r\n    db.collection(\"ages\").doc(found.ageRange).update(found)\r\n    .then(function() {\r\n        console.log(\"Document successfully written!\");\r\n    })\r\n    .catch(function(error) {\r\n        console.error(\"Error writing document: \", error);\r\n    });\r\n    onToggleEditMode(id);\r\n    console.log(\"saved to database\")\r\n  };\r\n\r\n  const onChange = (e, row) => {\r\n\r\n    if (!previous[row.id]) {\r\n      setPrevious(state => ({ ...state, [row.id]: row }));\r\n    }\r\n\r\n    let value = e.target.value;\r\n    const name = e.target.name;\r\n    const { id } = row;\r\n    const newRows = rows.map(row => {\r\n      if (row.id === id) {\r\n        return { ...row, [name]: parseFloat(value) };\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n  };\r\n  \r\n  const onRevert = id => {\r\n    const newRows = rows.map(row => {\r\n      if (row.id === id) {\r\n        return previous[id] ? previous[id] : row;\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n    setPrevious(state => {\r\n      delete state[id];\r\n      return state;\r\n    });\r\n    onToggleEditMode(id);\r\n  };\r\n\r\n  const calcMedian = arr => {\r\n    const mid = Math.floor(arr.length / 2),\r\n      nums = [...arr].sort((a, b) => a - b);\r\n    return arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\r\n  };\r\n  const sumRows = (rows) => { //\r\n    let rowsCopy = rows; \r\n\r\n    let area = rows.reduce((r, d) => parseInt(r) + d.area, 0);\r\n    let percent = rows.reduce((r, d) => r + d.percent, 0);\r\n\r\n    var hecVolArray = [];\r\n    for(var i=0; i<rows.length; i++) {\r\n      hecVolArray.push(rows[i].hecVolume)\r\n    }\r\n    let hecVolumeMedian = calcMedian(hecVolArray);\r\n    let totVolume = rows.reduce((r, d) => r + d.totVolume, 0);\r\n\r\n    var qualityArray = [];\r\n    for(var j=0; j<rows.length; j++) {\r\n      qualityArray.push(rows[j].quality)\r\n    }\r\n    let qualityMedian = calcMedian(qualityArray);\r\n\r\n    var growthRateArray = [];\r\n    for(var k=0; k<rows.length; k++) {\r\n      growthRateArray.push(rows[k].growthRate)\r\n    }\r\n    let growthRateMedian = calcMedian(growthRateArray);\r\n\r\n\r\n    // hardcoded percents for now\r\n    let pine = 23\r\n    let fir = 71\r\n    let leaf = 6\r\n    let summedRow = createData(\"Summa\", area, percent, hecVolumeMedian.toFixed(1), totVolume, qualityMedian.toFixed(1), growthRateMedian.toFixed(1), pine, fir, leaf)\r\n    rowsCopy.push(summedRow) // Append sum row\r\n    return rowsCopy\r\n  }\r\n  \r\n  let ageLabels = rows.map(a => a.ageRange);\r\n  ageLabels.pop()\r\n  let areaData = rows.map(a => a.area);  \r\n  areaData.pop()\r\n\r\n\r\n  const basicData = {\r\n    labels: ageLabels,\r\n    datasets: [\r\n        {\r\n            label: 'Åldersklassfördelning idag',\r\n            backgroundColor: '#42A5F5',\r\n            data: areaData\r\n        }\r\n      ]\r\n    };\r\n    let basicOptions = {\r\n      legend: {\r\n          labels: {\r\n              fontColor: '#495057'\r\n          }\r\n      },\r\n      scales: {\r\n          xAxes: [{\r\n              ticks: {\r\n                  fontColor: '#495057'\r\n              }\r\n          }],\r\n          yAxes: [{\r\n              ticks: {\r\n                  fontColor: '#495057'\r\n              }\r\n          }]\r\n    }\r\n  };\r\n\r\n  return (\r\n    \r\n    <Paper className={classes.root}>\r\n    {loading ? (\r\n\r\n    <LinearProgress color=\"secondary\" />\r\n\r\n  ) : (\r\n    <div>\r\n      <Table className={classes.table} size=\"small\" aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"center\" colSpan={1}><Tooltip title={tableText.areal} arrow><span>Åldersklass</span></Tooltip></TableCell> \r\n            <TableCell align=\"center\" colSpan={2}><Tooltip title={tableText.areal} arrow><span>Areal</span></Tooltip></TableCell>\r\n            <TableCell align=\"center\" colSpan={2}><Tooltip title={tableText.storage} arrow><span>Virkesförråd</span></Tooltip></TableCell>\r\n            <TableCell align=\"center\" colSpan={1}><Tooltip title={tableText.quality} arrow><span>Bonitet</span></Tooltip></TableCell>\r\n            <TableCell align=\"center\" colSpan={1}><Tooltip title={tableText.growthRate} arrow><span>Tillväxt</span></Tooltip></TableCell>\r\n            <TableCell align=\"center\" colSpan={3}><Tooltip title={tableText.distribution} arrow><span>Trädslagsfördelning&nbsp;(%)</span></Tooltip></TableCell>\r\n            <TableCell align=\"center\"></TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell align=\"center\" />\r\n            <TableCell align=\"center\">ha</TableCell>\r\n            <TableCell align=\"center\">%</TableCell>\r\n            <TableCell align=\"center\">m3sk/ha</TableCell>\r\n            <TableCell align=\"center\">m3sktot</TableCell>\r\n            <TableCell align=\"center\" colSpan={2}>m3sk/ha och år</TableCell>\r\n            <TableCell align=\"center\">Tall</TableCell>\r\n            <TableCell align=\"center\">Gran</TableCell>\r\n            <TableCell align=\"center\">Löv</TableCell>\r\n            <TableCell align=\"center\"></TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map(row => (\r\n            <TableRow key={row.id}>\r\n              <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n                {row.ageRange}\r\n              </TableCell>\r\n              <CustomTableCell {...{ row, name: \"area\", onChange }} />\r\n              <CustomTableCell {...{ row, name: \"percent\", onChange }} />\r\n              <CustomTableCell {...{ row, name: \"hecVolume\", onChange }} />\r\n              <CustomTableCell {...{ row, name: \"totVolume\", onChange }} />\r\n              <CustomTableCell {...{ row, name: \"quality\", onChange }} />\r\n              <CustomTableCell {...{ row, name: \"growthRate\", onChange }} />\r\n              <CustomTableCell {...{ row, name: \"pine\", onChange }} />\r\n              <CustomTableCell {...{ row, name: \"fir\", onChange }} />\r\n              <CustomTableCell {...{ row, name: \"leaf\", onChange }} />\r\n              <TableCell className={classes.selectTableCell}>\r\n                {row.isEditMode ? (\r\n                  <>\r\n                    <IconButton\r\n                      aria-label=\"done\"\r\n                      size=\"small\"\r\n                      onClick={() => onSaveEditMode(row.id)}\r\n                    >\r\n                      <DoneIcon fontSize=\"small\"/>\r\n                    </IconButton>\r\n                    <IconButton\r\n                      aria-label=\"revert\"\r\n                      size=\"small\"\r\n                      onClick={() => onRevert(row.id)}\r\n                    >\r\n                      <RevertIcon fontSize=\"small\"/>\r\n                    </IconButton>\r\n                  </>\r\n                ) : (\r\n                  <IconButton\r\n                    aria-label=\"delete\"\r\n                    size=\"small\"\r\n                    onClick={() => onToggleEditMode(row.id)}\r\n                  >\r\n                    <EditIcon fontSize=\"small\"/>\r\n                  </IconButton>\r\n                )}\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n      <Chart type=\"bar\" data={basicData} options={basicOptions} />\r\n   </div>\r\n  )}\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default AgeTableComponent;","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\Map.js",["103","104","105","106"],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\utils\\tooltips.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\components\\SummaryComponent.js",["107","108","109","110","111"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport db from '../utils/firestore.js' // <----\r\nimport firebase from \"firebase/app\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport { Chart } from 'primereact/chart';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      width: '100%',\r\n      textAlign: 'center',\r\n    },\r\n  });\r\nconst SummaryComponent = () => {\r\n    const classes = useStyles();\r\n    const [summaryData, setSummaryData] = useState({volDistribution: {}, groundUse: {}});\r\n    const [loading, setLoading] = useState(true);\r\n    const obj = {\r\n        groundUse: {\r\n            forest: 82.8,\r\n            bog: 7.8, \r\n            farmland: 10.2, \r\n            misc: 10.2,\r\n            sumArea: 102.3,\r\n            water: 11.1\r\n        },\r\n        volDistribution: {\r\n            pine: 3700,\r\n            fir: 11210,\r\n            leaf: 990,\r\n            totVolume: 11210,\r\n            median: 192,\r\n            qualityMedian: 7.3,\r\n            growth: 5.4\r\n        }\r\n        \r\n    }\r\n    useEffect(() => {\r\n        // db.collection(\"summary\").doc(\"info\").set(obj)\r\n        //     .then(function() {\r\n        //     console.log(\"Document successfully written!\");\r\n        //     })\r\n        //     .catch(function(error) {\r\n        //     console.error(\"Error writing document: \", error);\r\n        //     });\r\n\r\n        db.collection(\"summary\").doc(\"info\").get()\r\n        .then(function(doc) {\r\n            if (doc.exists) {\r\n                //console.log(\"Document data:\", doc.data());\r\n                setSummaryData(doc.data());\r\n                setLoading(false);\r\n            } else {\r\n                // doc.data() will be undefined in this case\r\n                console.log(\"No such document!\");\r\n            }\r\n        }).catch(function(error) {\r\n            console.log(\"Error getting document:\", error);\r\n        });\r\n    }, []);\r\n\r\n    const groundOptions = {\r\n        legend: {\r\n            labels: {\r\n                fontColor: '#495057',\r\n                fontSize: 10\r\n            }\r\n        }\r\n    };\r\n    const groundPieChartData = {\r\n        labels: ['Produktiv skogsmark', 'Myr', 'Inägomark', 'Övrig landareal'],\r\n        datasets: [\r\n            {\r\n                data: [\r\n                    summaryData.groundUse.forest,\r\n                    summaryData.groundUse.bog, \r\n                    summaryData.groundUse.farmland, \r\n                    summaryData.groundUse.misc\r\n                ],\r\n                backgroundColor: [\r\n                    \"#66BB6A\", \r\n                    \"#42A5F5\",\r\n                    \"#FFA726\"\r\n                ],\r\n                hoverBackgroundColor: [\r\n                    \"#81C784\",\r\n                    \"#64B5F6\",\r\n                    \"#FFB74D\"\r\n                ]\r\n            }\r\n        ]\r\n    };\r\n    const forestPieChartData = {\r\n        labels: ['Gran', 'Tall', 'Ordinära lövträd'],\r\n        datasets: [\r\n            {\r\n                data: [summaryData.volDistribution.fir, \r\n                    summaryData.volDistribution.pine, \r\n                    summaryData.volDistribution.leaf,\r\n                ],\r\n                backgroundColor: [\r\n                    \"#42A5F5\",\r\n                    \"#66BB6A\",\r\n                    \"#FFA726\"\r\n                ],\r\n                hoverBackgroundColor: [\r\n                    \"#64B5F6\",\r\n                    \"#81C784\",\r\n                    \"#FFB74D\"\r\n                ]\r\n            }\r\n        ]\r\n    };\r\n\r\n    const forestOptions = {\r\n        legend: {\r\n            labels: {\r\n                fontColor: '#495057'\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Container >\r\n                <Typography variant=\"h3\" gutterBottom>\r\n                    Källshyltan\r\n                </Typography>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                    Nissafors 1:12\r\n                </Typography>\r\n                <Grid container spacing={6}>\r\n                    <Grid item xs={3} sm={6}>\r\n                        <Typography variant=\"h5\" gutterBottom>\r\n                            Total landareal: {summaryData.groundUse.sumArea} ha\r\n                        </Typography>\r\n                        <Typography variant=\"subtitle2\" gutterBottom>\r\n                            Myr: {summaryData.groundUse.bog} ha\r\n                        </Typography>\r\n                        <Typography variant=\"subtitle2\" gutterBottom>\r\n                            Inägomark: {summaryData.groundUse.farmland} ha\r\n                        </Typography>\r\n                        <Typography variant=\"subtitle2\" gutterBottom>\r\n                            Produktiv skogsmark: {summaryData.groundUse.forest} ha\r\n                        </Typography>\r\n                        <Typography variant=\"subtitle2\" gutterBottom>\r\n                            Övrig landsareal: {summaryData.groundUse.misc} ha\r\n                        </Typography>\r\n\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Vatten: {summaryData.groundUse.water} ha\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={6} sm={6}>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Total skogsmark: {summaryData.volDistribution.totVolume} ha\r\n                        </Typography>\r\n                        <Typography variant=\"subtitle2\" gutterBottom>\r\n                            Tall: {summaryData.volDistribution.pine} ha\r\n                        </Typography>\r\n                        <Typography variant=\"subtitle2\" gutterBottom>\r\n                            Ordinära lövträd: {summaryData.volDistribution.leaf} ha\r\n                        </Typography>\r\n                        <Typography variant=\"subtitle2\" gutterBottom>\r\n                            Gran: {summaryData.volDistribution.pine} ha\r\n                        </Typography>\r\n\r\n                        <Typography variant=\"subtitle2\" gutterBottom>\r\n                            Medeltal: {summaryData.volDistribution.median} (m3sk/ha)\r\n                        </Typography>\r\n                        <Typography variant=\"subtitle2\" gutterBottom>\r\n                            Bonitet i medeltal: {summaryData.volDistribution.qualityMedian} (m3sk/ha och år)\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        \r\n                        <Typography variant=\"h6\"  gutterBottom>\r\n                            Markanvändning\r\n                        </Typography>\r\n                        \r\n                        <Chart type=\"pie\" data={groundPieChartData} options={groundOptions} />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        \r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Skogens volymfördelning\r\n                        </Typography>\r\n                        <Chart type=\"pie\" data={forestPieChartData} options={forestOptions} />\r\n                    \r\n                    </Grid>\r\n                    \r\n\r\n                </Grid>\r\n\r\n            </Container>\r\n        </Paper>\r\n   \r\n      );\r\n}\r\nexport default SummaryComponent;","C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\utils\\Utils.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\utils\\map-style.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\utils\\firestore.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\data\\areas.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\data\\border.js",[],"C:\\Users\\Samuel\\Documents\\eSkog\\skogsite\\src\\data\\houses.js",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"112","replacedBy":"116"},{"ruleId":"114","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":1,"column":37,"nodeType":"120","messageId":"121","endLine":1,"endColumn":43},{"ruleId":"118","severity":1,"message":"122","line":2,"column":8,"nodeType":"120","messageId":"121","endLine":2,"endColumn":23},{"ruleId":"118","severity":1,"message":"123","line":4,"column":8,"nodeType":"120","messageId":"121","endLine":4,"endColumn":16},{"ruleId":"118","severity":1,"message":"124","line":1,"column":17,"nodeType":"120","messageId":"121","endLine":1,"endColumn":26},{"ruleId":"118","severity":1,"message":"119","line":1,"column":38,"nodeType":"120","messageId":"121","endLine":1,"endColumn":44},{"ruleId":"118","severity":1,"message":"125","line":2,"column":8,"nodeType":"120","messageId":"121","endLine":2,"endColumn":16},{"ruleId":"126","severity":1,"message":"127","line":130,"column":5,"nodeType":"128","endLine":130,"endColumn":7,"suggestions":"129"},{"ruleId":"118","severity":1,"message":"130","line":4,"column":8,"nodeType":"120","messageId":"121","endLine":4,"endColumn":16},{"ruleId":"118","severity":1,"message":"131","line":5,"column":8,"nodeType":"120","messageId":"121","endLine":5,"endColumn":20},{"ruleId":"118","severity":1,"message":"132","line":12,"column":30,"nodeType":"120","messageId":"121","endLine":12,"endColumn":48},{"ruleId":"118","severity":1,"message":"133","line":14,"column":9,"nodeType":"120","messageId":"121","endLine":14,"endColumn":26},{"ruleId":"118","severity":1,"message":"119","line":1,"column":37,"nodeType":"120","messageId":"121","endLine":1,"endColumn":43},{"ruleId":"118","severity":1,"message":"123","line":3,"column":8,"nodeType":"120","messageId":"121","endLine":3,"endColumn":16},{"ruleId":"118","severity":1,"message":"134","line":10,"column":8,"nodeType":"120","messageId":"121","endLine":10,"endColumn":15},{"ruleId":"118","severity":1,"message":"135","line":23,"column":12,"nodeType":"120","messageId":"121","endLine":23,"endColumn":19},{"ruleId":"118","severity":1,"message":"136","line":24,"column":11,"nodeType":"120","messageId":"121","endLine":24,"endColumn":14},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],["137"],["138"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'ContentEditable' is defined but never used.","'firebase' is defined but never used.","'useEffect' is defined but never used.","'ReactDOM' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sumRows'. Either include it or remove the dependency array.","ArrayExpression",["139"],"'mapboxgl' is defined but never used.","'MapboxWorker' is defined but never used.","'geoJsonToFirestore' is defined but never used.","'featurecollection' is defined but never used.","'Divider' is defined but never used.","'loading' is assigned a value but never used.","'obj' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},"Update the dependencies array to be: [sumRows]",{"range":"142","text":"143"},[3542,3544],"[sumRows]"]